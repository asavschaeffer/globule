"""
Abstract service contracts (interfaces) for the Globule core architecture.

These Abstract Base Classes (ABCs) define the "verbs" of the system,
establishing the boundaries between the orchestration engine and its providers.
"""
from abc import ABC, abstractmethod
from typing import List, Dict, Any
from uuid import UUID

from globule.core.models import GlobuleV1, ProcessedGlobuleV1, EmbeddingResult, ProcessedContent, StructuredQuery
from globule.core.errors import ParserError, EmbeddingError, StorageError

class IParserProvider(ABC):
    """Interface for a service that parses raw text into structured data."""
    
    @abstractmethod
    async def parse(self, text: str) -> dict:
        """
        Parses the raw text from a Globule.

        Args:
            text: The raw input text.

        Returns:
            A dictionary containing the extracted structured data.
            
        Raises:
            ParserError: If parsing fails.
        """
        pass

class IProcessor(ABC):
    """
    Interface for content-specific processors that can handle different input types.
    
    Processors extend the parsing pipeline to handle multi-modal content (text, images, etc.)
    Each processor declares its capability via can_process() and provides specialized processing.
    """
    
    @abstractmethod
    def can_process(self, globule: GlobuleV1) -> float:
        """
        Determine processing capability for given content.
        
        Uses content analysis similar to AdaptiveInputModule's content profiling
        to determine if this processor can handle the input type.
        
        Args:
            globule: The raw globule to evaluate.
            
        Returns:
            Confidence score 0.0-1.0 indicating processing capability.
            - 0.0: Cannot process this content
            - >0.5: Can process with some confidence
            - >0.9: High confidence for this content type
        """
        pass
    
    @abstractmethod
    async def process(self, globule: GlobuleV1) -> ProcessedContent:
        """
        Process globule content and return structured data.
        
        Implementations should handle errors gracefully and include appropriate
        metadata for the content type (e.g., EXIF for images, duration for audio).
        
        Args:
            globule: The globule to process.
            
        Returns:
            ProcessedContent with extracted structured data and metadata.
            
        Raises:
            ParserError: If processing fails in a recoverable way.
            RuntimeError: If processing fails due to system issues.
        """
        pass
    
    @abstractmethod
    def get_processor_type(self) -> str:
        """
        Return the type identifier for this processor.
        
        Returns:
            String identifier (e.g., 'text', 'image', 'audio').
        """
        pass

class BaseEmbeddingAdapter(ABC):
    """Base Abstract Class for embedding adapters.
    
    Defines the complete interface that all embedding adapters must implement.
    Adapters translate between our core logic and external embedding providers.
    """
    
    @abstractmethod
    async def embed_single(self, text: str) -> EmbeddingResult:
        """
        Generates a vector embedding for a single text.

        Args:
            text: The input text.

        Returns:
            An EmbeddingResult containing the vector embedding and metadata.
            
        Raises:
            EmbeddingError: If embedding generation fails.
        """
        pass
    
    @abstractmethod
    async def batch_embed(self, texts: List[str]) -> List[EmbeddingResult]:
        """
        Generates vector embeddings for multiple texts efficiently.
        
        This method should be preferred for multiple embeddings as it reduces
        network latency and may be optimized by the underlying provider.

        Args:
            texts: List of input texts.

        Returns:
            List of EmbeddingResults, one for each input text.
            
        Raises:
            EmbeddingError: If embedding generation fails.
        """
        pass
    
    @abstractmethod
    def get_dimensions(self) -> int:
        """
        Returns the number of dimensions in embeddings generated by this adapter.
        
        Returns:
            The embedding dimensionality.
        """
        pass
    
    @abstractmethod
    def get_model_name(self) -> str:
        """
        Returns the name/identifier of the embedding model being used.
        
        Returns:
            The model name or identifier.
        """
        pass

# Legacy interface for backward compatibility - will be removed
class IEmbeddingAdapter(BaseEmbeddingAdapter):
    """Compatibility alias for BaseEmbeddingAdapter."""
    pass

class IStorageManager(ABC):
    """Interface for a service that handles storage and retrieval of Globules."""
    
    @abstractmethod
    def save(self, globule: ProcessedGlobuleV1) -> None:
        """
        Saves a ProcessedGlobule to the storage backend.

        Args:
            globule: The ProcessedGlobule to save.
            
        Raises:
            StorageError: If saving fails.
        """
        pass

    @abstractmethod
    def get(self, globule_id: UUID) -> ProcessedGlobuleV1:
        """
        Retrieves a ProcessedGlobule from the storage backend.

        Args:
            globule_id: The UUID of the Globule to retrieve.

        Returns:
            The retrieved ProcessedGlobule.
            
        Raises:
            StorageError: If the Globule is not found or retrieval fails.
        """
        pass

    @abstractmethod
    async def search(self, query: str, limit: int = 10) -> List[ProcessedGlobuleV1]:
        """
        Search for globules using a natural language query.

        Args:
            query: The search query string.
            limit: Maximum number of results to return.

        Returns:
            List of ProcessedGlobules matching the query.
            
        Raises:
            StorageError: If search fails.
        """
        pass

    @abstractmethod
    async def execute_sql(self, query: str, query_name: str = "Query") -> Dict[str, Any]:
        """
        Execute a SQL query against the storage backend.

        Args:
            query: The SQL query to execute.
            query_name: Optional name for the query (for logging/metadata).

        Returns:
            Dictionary containing query results and metadata.
            
        Raises:
            StorageError: If query execution fails or query is invalid.
        """
        pass

    @abstractmethod
    async def query_structured(self, query: StructuredQuery) -> List[ProcessedGlobuleV1]:
        """
        Execute structured query for high-performance domain-specific searches.
        
        This method provides fast queries for specific domains (e.g., valet workflow)
        by querying indexed fields directly, bypassing vector/full-text search.
        
        Args:
            query: The structured query with domain, filters, and options.
            
        Returns:
            List of ProcessedGlobules matching the query criteria.
            
        Raises:
            StorageError: If query execution fails or query is invalid.
        """
        pass

class ISchemaManager(ABC):
    """Interface for a service that manages loading and accessing schemas."""

    @abstractmethod
    def get_schema(self, schema_name: str) -> Dict[str, Any]:
        """Retrieves a schema by its name."""
        pass

    @abstractmethod
    def detect_schema_for_text(self, text: str) -> str | None:
        """Detects the most appropriate schema for a given text."""
        pass

    @abstractmethod
    def get_available_schemas(self) -> List[str]:
        """Returns a list of all available schema names."""
        pass

class IConfigManager(ABC):
    """Interface for configuration management with three-tier cascade support."""
    
    @abstractmethod
    def get(self, key: str, default: Any = None) -> Any:
        """
        Retrieve configuration value with cascade resolution.
        
        Uses dot notation for nested keys (e.g., 'embedding.model').
        Resolves in order: init args → env vars → user YAML → system YAML → defaults.
        
        Args:
            key: Configuration key in dot notation.
            default: Default value if key not found.
            
        Returns:
            Configuration value or default.
        """
        pass
    
    @abstractmethod
    def get_section(self, section: str) -> Dict[str, Any]:
        """
        Get entire configuration section.
        
        Args:
            section: Section name (e.g., 'embedding', 'storage').
            
        Returns:
            Dictionary containing all keys in the section.
        """
        pass
    
    @abstractmethod
    def reload(self) -> None:
        """
        Reload configuration from all sources.
        
        Primarily for development; production should use immutable configs.
        """
        pass

class IOrchestrationEngine(ABC):
    """Interface for the core orchestration engine."""
    
    @abstractmethod
    async def process(self, globule: GlobuleV1) -> ProcessedGlobuleV1:
        """
        Processes a raw Globule into a ProcessedGlobule.

        This method orchestrates calls to the parser, embedder, and other
        services to enrich the raw Globule.

        Args:
            globule: The raw GlobuleV1 to process.

        Returns:
            The resulting ProcessedGlobuleV1.
        """
        pass
